/* ORGanizer for Salesforce - v10000.0.9.53 
 * Author: Enrico Murru (https://organizer.solutions/)
 * Copyright 2016-2024
 */
!function(exports,global){define("backup-utils",["global","constants","jquery","popup-utils","salesforce-client","lz-string","licensing-utils"],function($G,$C,$,PopupUtils,$SalesforceClient,LZString,$LicUtils){"use sctrict";const chrome=$G.chrome,debug=($G.window,PopupUtils.newDebugger("ORGanizer: BackupUtils")),MAX_REMOTE_BACKUPS=250,BACKUPMETHODS={GDRIVE:"GDRIVE",SYNC:"EXT-SYNC"};var BACKUPMETHODS_EXTENDED={};BACKUPMETHODS_EXTENDED[BACKUPMETHODS.GDRIVE]="Google Drive Backup",BACKUPMETHODS_EXTENDED[BACKUPMETHODS.SYNC]="Extension's Sync Storage";const BackupUtils={MAX_REMOTE_BACKUPS:MAX_REMOTE_BACKUPS,increaseGDriveAPICounter:function(dontUpdateLastAPIUsageDate){return $G.getConfigParameterLocal(["gdriveAPICounter","gdriveAPICounterDate","gdriveAPIStartDate"],function(err,params){if(!err){var currentValue=(params||{}).gdriveAPICounter||0,startDate=(params||{}).gdriveAPIStartDate||(new Date).getTime();return currentValue++,$G.setConfigParameterLocal("gdriveAPICounter",currentValue,function(err){return $G.setConfigParameterLocal("gdriveAPIStartDate",startDate,function(err){dontUpdateLastAPIUsageDate||$G.setConfigParameterLocal("gdriveAPICounterDate",(new Date).getTime())})})}})},listGDriveBackups:function(listOptions,callback){var url=$C.Endpoints.GoogleDriveListFilesUrl+"?pageSize="+MAX_REMOTE_BACKUPS+"&spaces=appDataFolder&orderBy="+encodeURIComponent("modifiedTime desc")+"&fields=files(id,createdTime,modifiedTime,name,version,isAppAuthorized, properties)&q="+encodeURIComponent("properties has {key='isBackup' and value='true'}"),options={type:"GET",cache:!1,url:url,headers:{Authorization:"Bearer "+listOptions.tokens.access_token,"Content-Type":"application/json"},success:function(data,textStatus,response){try{data=JSON.parse(data)}catch(ex){}return debug.log("listGDriveBackups.success",data,textStatus,response),callback&&callback(null,data.files||[])},error:function(response,textStatus,errorThrown){return debug.log("listGDriveBackups.error",response,textStatus,errorThrown),401!==response.status||listOptions.refreshAlreadyRequested?callback&&callback(response&&response.responseJSON&&response.responseJSON.error||new Error(textStatus||errorThrown)):$LicUtils.refreshToken(!1,function(err,refreshedTokens){return err?(err.userActionNeeded=!0,callback&&callback(err)):(listOptions.tokens=refreshedTokens,listOptions.refreshAlreadyRequested=!0,BackupUtils.listGDriveBackups(listOptions,callback))})}};return BackupUtils.increaseGDriveAPICounter(listOptions.dontUpdateLastAPIUsageDate),PopupUtils.ajaxCall(options)},getGDriveBackup:function(getOptions,callback){var fileId=getOptions.remotePackageInfo.fileId||getOptions.remotePackageInfo.allBackups[0].id,url=$C.Endpoints.GoogleDriveListFilesUrl+"/"+encodeURIComponent(fileId)+"?alt=media",options={type:"GET",cache:!1,url:url,headers:{Authorization:"Bearer "+getOptions.remotePackageInfo.tokens.access_token,"Content-Type":"application/json"},success:function(data,textStatus,response){try{data=JSON.parse(data)}catch(ex){}if(debug.log("getGDriveBackup.success",data,textStatus,response),!fileId){var fileProperties=getOptions.remotePackageInfo.allBackups[0].propreties,passphrase=BackupUtils.joinGDrivePassphrase(fileProperties);data.p=passphrase}return callback&&callback(null,data||{})},error:function(response,textStatus,errorThrown){return debug.log("getGDriveBackup.error",response,textStatus,errorThrown),callback&&callback(response&&response.responseJSON&&response.responseJSON.error||new Error(textStatus||errorThrown))}};return BackupUtils.increaseGDriveAPICounter(),PopupUtils.ajaxCall(options)},deleteGDriveBackup:function(deleteOptions,callback){var fileId=deleteOptions.remotePackageInfo.fileId,url=$C.Endpoints.GoogleDriveListFilesUrl+"/"+encodeURIComponent(fileId),options={type:"DELETE",cache:!1,url:url,headers:{Authorization:"Bearer "+deleteOptions.remotePackageInfo.tokens.access_token,"Content-Type":"application/json"},success:function(data,textStatus,response){try{data=JSON.parse(data)}catch(ex){}return debug.log("deleteGDriveBackup.success",data,textStatus,response),callback&&callback(null,data||{})},error:function(response,textStatus,errorThrown){return debug.log("deleteGDriveBackup.error",response,textStatus,errorThrown),callback&&callback(response&&response.responseJSON&&response.responseJSON.error||new Error(textStatus||errorThrown))}};return BackupUtils.increaseGDriveAPICounter(deleteOptions.dontUpdateLastAPIUsageDate),PopupUtils.ajaxCall(options)},splitGDrivePassphrase:function(pf){const MAX_PROPRETY_SIZE=121;for(var prArray=[],tempKey="",i=0;i<pf.length;i++)tempKey.length===MAX_PROPRETY_SIZE&&(prArray.push(tempKey),tempKey=""),tempKey+=pf[i];tempKey.length>0&&prArray.push(tempKey);for(var returnArray=[],i=0;i<prArray.length;i++){var key="p"+i;i<10&&(key="p0"+i),returnArray.push({key:key,value:prArray[i]})}return returnArray},joinGDrivePassphrase:function(properties){properties=properties||{};var splitArray=[];for(var key in properties)properties.hasOwnProperty(key)&&/^p([0-9]){2,2}$/gi.test(key)&&splitArray.push(key);splitArray.sort();for(var joinedArray=[],i=0;i<splitArray.length;i++)joinedArray.push(properties[splitArray[i]]);return joinedArray.join("")},upsertGDriveBackup:function(upsertOptions,callback){upsertOptions=upsertOptions||{},upsertOptions.fileId=upsertOptions.fileId||null,upsertOptions.localCache=upsertOptions.localCache||{},upsertOptions.syncData=upsertOptions.syncData||{};var url=$C.Endpoints.GoogleDriveUploadFileUrl+(upsertOptions.fileId?"/"+upsertOptions.fileId:"")+"?uploadType=multipart",fileMetadata={name:"organizer_backup.bkp",properties:{isBackup:"true",extensionId:chrome.runtime.id,d:upsertOptions.syncData.d,protected:!!upsertOptions.syncData.p,md5:upsertOptions.syncData.md5,userAgent:$G.detectBrowser($G.window.navigator.userAgent)+" ("+$G.detectOS($G.window.navigator.userAgent)+")",uc:upsertOptions.extensionUniqueCode},mimeType:"application/json"};if(upsertOptions.fileId||(fileMetadata.parents=["appDataFolder"]),upsertOptions.syncData.p)for(var pwdSplitArray=BackupUtils.splitGDrivePassphrase(upsertOptions.syncData.p),i=0;i<pwdSplitArray.length;i++){var splitItem=pwdSplitArray[i];fileMetadata.properties[splitItem.key]=splitItem.value}var fileContent=new Blob([JSON.stringify(upsertOptions.syncData)],{type:"application/json"}),metadataContent=new Blob([JSON.stringify(fileMetadata)],{type:"application/json"}),formData=new FormData;formData.append("metadata",metadataContent),formData.append("file",fileContent);var options={type:upsertOptions.fileId?"PATCH":"POST",cache:!1,url:url,headers:{Authorization:"Bearer "+upsertOptions.localCache.tokens.access_token},contentType:!1,processData:!1,data:formData,success:function(data,textStatus,response){try{data=JSON.parse(data)}catch(ex){}return debug.log("upsertGDriveBackup.success",data,textStatus,response),callback&&callback(null,data||{})},error:function(response,textStatus,errorThrown){return debug.log("upsertGDriveBackup.error",response,textStatus,errorThrown),callback&&callback(response&&response.responseJSON&&response.responseJSON.error||new Error(textStatus||errorThrown))}};return debug.log("Ajax Call upsertGDriveBackup:",options),BackupUtils.increaseGDriveAPICounter(),PopupUtils.ajaxCall(options)},pushGDriveBackup:function(backupPackage,options,callback){return debug.log("pushGDriveBackup",backupPackage,options),$LicUtils.getOAuthTokens(function(err,tokens){if(err)return err.userActionNeeded=!0,callback&&callback(err);if(!tokens||!tokens.access_token){var errTokenNotFound=new Error("Google access token not found. Need user authorization.");return errTokenNotFound.userActionNeeded=!0,callback&&callback(errTokenNotFound)}var listOptions={tokens:tokens};return BackupUtils.listGDriveBackups(listOptions,function(err,listResult){var packageInfo={};if(listResult&&listResult.length>0)for(var li=0;li<listResult.length;li++){var lastBackup=listResult[li];if(options.extensionUniqueCode===lastBackup.properties.uc){if(packageInfo.md5=lastBackup.properties.md5,packageInfo.p=BackupUtils.joinGDrivePassphrase(lastBackup.properties),packageInfo.d=lastBackup.properties.d,packageInfo.origin={id:lastBackup.properties.extensionId},packageInfo.allBackups=listResult,packageInfo.tokens=listOptions.tokens,packageInfo.method=BACKUPMETHODS.GDRIVE,options.md5===packageInfo.md5)return debug.log("No backup needed: package "+options.md5+" already on GDrive."),callback&&callback(null,"No backup needed: package "+options.md5+" already on GDrive {"+lastBackup.id+"}");break}}var syncParams=PopupUtils.createSynchedMap(backupPackage.storedParamsOrgs,backupPackage.storedParamsAccounts,backupPackage.otherParams,{includeAllLogins:!0}),upsertOptions={syncData:syncParams,localCache:listOptions,fileId:(packageInfo.allBackups||[]).length>=MAX_REMOTE_BACKUPS?packageInfo.allBackups.pop().id:null};return upsertOptions.syncData.md5=options.md5,upsertOptions.syncData.d=(new Date).getTime(),upsertOptions.syncData.origin={id:chrome.runtime.id},upsertOptions.syncData.p=options.localpassPhrase?PopupUtils.getPasswordHash(options.localpassPhrase,PopupUtils.SyncEncryptionEnabledVersion):null,upsertOptions.extensionUniqueCode=options.extensionUniqueCode,BackupUtils.upsertGDriveBackup(upsertOptions,function(err,upsertResult){return callback&&callback(err,upsertResult)})})})},handleBackgroundBackupAndSync2:function(params,callback){var params=params||{},localCache={isGDriveEnabled:!1,localBackupStatus:null,remotePackageInfo:null};return PopupUtils.getLocalPassphrase(function(err,localpassPhrase){return err?(debug.error("handleBackgroundBackupAndSync: cannot retrieve local passphrase"),callback&&callback(err)):(localCache.localpassPhrase=localpassPhrase,debug.log("# handleBackgroundBackupAndSync # - localCache 1 :",params,localCache),PopupUtils.getLocalCode(function(uc){return localCache.extensionUniqueCode=uc,PopupUtils.getConfigParameterLocal([PopupUtils.StorageParamNameBackgroundBackupStatus,PopupUtils.StorageParamNameBetaFeatures],function(err,storageParams){return err?(debug.error("handleBackgroundBackupAndSync: cannot retrieve params (1)"),callback&&callback(err)):(localCache.localBackupStatus=(storageParams||{})[PopupUtils.StorageParamNameBackgroundBackupStatus]||{},localCache.betaFeatures=(storageParams||{})[PopupUtils.StorageParamNameBetaFeatures]||{},debug.log("# handleBackgroundBackupAndSync # - localCache 2 :",localCache),PopupUtils.getLicenseLimits({purchasedProducts:params.purchasedProducts},function(err,licenseLimits){if(debug.log("0 - license limits",err,licenseLimits),err)return debug.error("handleBackgroundBackupAndSync: cannot retrieve license limits"),callback&&callback(err);if(localCache.licenseLimits=licenseLimits,localCache.isGDriveBackupEnabled=localCache.betaFeatures.GDRIVE_SYNC&&localCache.betaFeatures.GDRIVE_SYNC.BACKUP_ENABLED&&licenseLimits.GDRIVE_SYNC,localCache.isGDriveBackupEnabled){var md5Options={includeAllLogins:!0};return BackupUtils.getLocalPackageWithMD5(md5Options,function(err,backupPackage,md5){if(err)return PopupUtils.setConfigParameterLocal(PopupUtils.StorageParamNameGDriveBackupError,err+""),callback&&callback(err);if(md5===localCache.localBackupStatus.md5)return debug.log("Local backup package ("+localCache.localBackupStatus.md5+") has already been synced"),callback&&callback();var gdriveBackupOptions={md5:md5,localpassPhrase:localCache.localpassPhrase,extensionUniqueCode:localCache.extensionUniqueCode};return BackupUtils.pushGDriveBackup(backupPackage,gdriveBackupOptions,function(err,rslt){return err?(console.error("Error pushing backup into GDrive",err),PopupUtils.logError(err),PopupUtils.setConfigParameterLocal(PopupUtils.StorageParamNameGDriveBackupError,"Error pushing backup into GDrive ("+err+")."),callback&&callback(err)):(debug.log("GDrive backup pushed succesfully:",rslt),PopupUtils.setConfigParameterLocal(PopupUtils.StorageParamNameGDriveBackupError,null),PopupUtils.setConfigParameterLocal(PopupUtils.StorageParamNameBackgroundBackupStatus,{md5:md5,lastUpdated:(new Date).getTime()}),callback&&callback())})})}return callback&&callback()}))})}))})},parseSyncChunks:function(params){params=params||{};var chunks=[];for(var key in params)if(0===key.indexOf("@C")){var index=key.replace("@C","");chunks[parseInt(index)]=params[key]}params=PopupUtils.getJSONFromChunks(chunks||[]);var orgs=[],accounts=[];for(key in params)0===key.indexOf("@A")?accounts.push(params[key]):0===key.indexOf("@G")&&(orgs=orgs.concat(JSON.parse(params[key])));var paramsToBeStored={};return paramsToBeStored[PopupUtils.StorageParamNameAccounts]=accounts,paramsToBeStored[PopupUtils.StorageParamNameOrgs]=orgs,paramsToBeStored.otherParameters=params["@P"],paramsToBeStored},getLocalPackageWithMD5:function(options,callback){return PopupUtils.getBackupPackage(function(err1,backupPackage){return debug.log("getLocalPackageWithMD5 0-",err1,backupPackage,options),options.entities=["accounts","orgs","scripts","queries"],PopupUtils.calculatePackageMD5(backupPackage,options,function(err2,md5){return debug.log("getLocalPackageWithMD5 1-",err2,md5,options),callback&&callback(err1||err2,backupPackage,md5)})})}};return BackupUtils}),global.true=exports}({},function(){return this}());